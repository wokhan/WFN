<Window xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:Class="Wokhan.WindowsFirewallNotifier.Notifier.UI.Windows.NotificationWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:WFN="clr-namespace:Wokhan.WindowsFirewallNotifier.Common;assembly=Wokhan.WindowsFirewallNotifier.Common"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" 
        xmlns:sampleApp="clr-namespace:Wokhan.WindowsFirewallNotifier.Notifier"
        Title="NotificationWindow" ResizeMode="NoResize" MinHeight="150" SizeToContent="Height" Width="480" WindowStyle="None" Icon="/Notifier;component/Resources/Shield.ico" Topmost="True"
        x:Name="NotifWindow" Top="{Binding ExpectedTop, ElementName=NotifWindow}" d:DesignHeight="150" UseLayoutRounding="True"
    BorderThickness="1" BorderBrush="Gray" ScrollViewer.CanContentScroll="False">
    <Window.Resources>
        <WFN:Settings x:Key="WFN" />
        <Style TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Padding" Value="10,5,10,5" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="Border" Margin="0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="Border" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ListView}">
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
        </Style>
    </Window.Resources>
    <Window.Triggers>
        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
            <BeginStoryboard>
                <Storyboard BeginTime="0" Duration="0:0:1" SpeedRatio="2">
                    <DoubleAnimation Storyboard.TargetProperty="Left" From="{Binding StartLeft, ElementName=NotifWindow, Mode=OneTime}" To="{Binding ExpectedLeft, ElementName=NotifWindow, Mode=OneTime}" />
                    <DoubleAnimation Storyboard.TargetProperty="Width" From="0" To="{Binding Width, ElementName=NotifWindow, Mode=OneTime}" />
                    <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1"/>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>
    <DockPanel>
        <Button DockPanel.Dock="Left" Foreground="DarkOrange" BorderBrush="White" FontWeight="Bold" Content="&lt;" Click="btnPrev_Click">
            <Button.Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex,ElementName=lstConnections}" Value="0">
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>
        <Button DockPanel.Dock="Right" Foreground="DarkOrange" BorderBrush="White" FontWeight="Bold" Content="&gt;" Click="btnNext_Click">
            <!--<Button.Style>
                <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding SelectedIndex,ElementName=lstConnections}" Value="{Binding}">
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>-->
        </Button>
        <Grid DockPanel.Dock="Top" Background="{DynamicResource {x:Static SystemColors.ActiveCaptionBrushKey}}" Margin="0,0,0,0">
            <TextBlock HorizontalAlignment="Left" Margin="5" Text="Windows firewall has blocked an outgoing connection" Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrush}}" FontWeight="Bold" />
            <Button HorizontalAlignment="Right" Content="0" Width="28" Height="28" VerticalAlignment="Center" FontFamily="Marlett" FontSize="20" Padding="0" Margin="0,0,10,0" Click="btnMin_Click" />
            <Button HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,0,50,0" Padding="4" Click="btnOptions_Click" Height="28" Width="28">
                <Image Source="/Notifier;component/Resources/Images/btnOptions.Image.png" />
            </Button>
        </Grid>
        <Grid>
            <ListView VirtualizingPanel.ScrollUnit="Item" SelectedIndex="0" SelectionMode="Single" x:Name="lstConnections" Background="Transparent" ItemsSource="{Binding Connections}" DataContext="{x:Static Application.Current}" d:DataContext="{d:DesignInstance Type=sampleApp:AppDataSample, IsDesignTimeCreatable=True}">
                <ListView.ItemContainerStyle>
                    <Style TargetType="ListViewItem">
                        <Setter Property="Padding" Value="0" />
                        <Style.Resources>
                            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
                            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />
                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Transparent" />
                        </Style.Resources>
                        <Style.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard Duration="0:0:1" SpeedRatio="2">
                                            <!--<ThicknessAnimation From="100,0,0,0" To="0,0,0,0" Storyboard.TargetProperty="Margin" />-->
                                            <DoubleAnimation From="0" To="1" Storyboard.TargetProperty="Opacity" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ListView.ItemContainerStyle>
                <ListView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListView.ItemsPanel>
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Width="{Binding ActualWidth,ElementName=lstConnections}">
                            <Grid Margin="5,0">
                                <WrapPanel Margin="5">
                                    <Image Height="32" MinWidth="32" Source="{Binding Icon}" />
                                    <Label Content="{Binding CurrentProd}" FontSize="14"/>
                                </WrapPanel>
                                <StackPanel HorizontalAlignment="Right">
                                    <TextBlock VerticalAlignment="Top" Margin="2" HorizontalAlignment="Right">
                                        <Run Text="{Binding SelectedIndex, Mode=OneWay, ElementName=lstConnections}" />/
                                        <Run Text="{Binding Items.Count, Mode=OneWay, ElementName=lstConnections}" /></TextBlock>
                                    <TextBlock VerticalAlignment="Top" Margin="2" HorizontalAlignment="Right" Text="{Binding TentativesCounter,StringFormat='Tentatives: {0}'}" />
                                </StackPanel>
                            </Grid>
                            <WrapPanel HorizontalAlignment="Center">
                                <WrapPanel.Resources>
                                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                        <Setter Property="BorderThickness" Value="1" />
                                        <Setter Property="BorderBrush" Value="Blue" />
                                        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        <Setter Property="Margin" Value="2" />
                                        <Setter Property="Width" Value="135" />
                                    </Style>
                                </WrapPanel.Resources>
                                <Button Click="btnAllow_Click" ToolTip="{Binding Source={x:Static WFN:Resources.MSG_ALLOW}}" HorizontalContentAlignment="Center">
                                    <WrapPanel>
                                        <Image Source="/Notifier;component/Resources/Images/btnAlwaysAllow.Image.png" Height="32" />
                                        <Label Content="{Binding Source={x:Static WFN:Resources.FW_RULE_ALLOW}}" VerticalContentAlignment="Center" />
                                    </WrapPanel>
                                </Button>
                                <Button Click="btnIgnore_Click" ToolTip="{Binding Source={x:Static WFN:Resources.MSG_BLOCK}}" HorizontalContentAlignment="Center">
                                    <WrapPanel>
                                        <Image Source="/Notifier;component/Resources/Images/btnAlwaysBlock.Image.png" Height="32" />
                                        <Label Content="{Binding Source={x:Static WFN:Resources.FW_RULE_BLOCK}}" VerticalContentAlignment="Center" />
                                    </WrapPanel>
                                </Button>
                                <Button Click="btnSkipAll_Click" HorizontalContentAlignment="Center">
                                    <WrapPanel>
                                        <Image Source="/Notifier;component/Resources/Images/btnClose.Image.png" Height="32" />
                                        <Label Content="Skip all" VerticalContentAlignment="Center" />
                                    </WrapPanel>
                                </Button>
                            </WrapPanel>
                            <Expander Expanded="btnAdvanced_Expand" IsExpanded="{Binding AlwaysShowDetails, Source={StaticResource WFN}}">
                                <Expander.Header>
                                    <WrapPanel HorizontalAlignment="Stretch">
                                        <Image Source="/Notifier;component/Resources/Images/btnAdvanced.Image.png" Height="16" />
                                        <Label Content="Advanced" />
                                    </WrapPanel>
                                </Expander.Header>
                                <Grid Background="{DynamicResource {x:Static SystemColors.InfoBrushKey}}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <CheckBox Content="{Binding CurrentPath, FallbackValue='Path: N/A'}" ContentStringFormat="Path: {0}" Grid.ColumnSpan="2" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsLocalPortChecked, ElementName=NotifWindow}" Grid.Row="1" Content="{Binding LocalPort, FallbackValue='Local port: N/A'}" ContentStringFormat="Local port: {0}" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsTargetPortChecked, ElementName=NotifWindow}" Grid.Row="2" Content="{Binding TargetPort, FallbackValue='Target port: N/A'}" ContentStringFormat="Target port: {0}" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsCurrentProfileChecked, ElementName=NotifWindow}" Grid.Row="3" Grid.ColumnSpan="2" Content="{Binding CurrentProfile, ElementName=NotifWindow, FallbackValue='Create a rule for the current profile only'}" ContentStringFormat="Create a rule for the current profile ({0}) only" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsTempRuleChecked, ElementName=NotifWindow}" Grid.Row="4" Grid.ColumnSpan="2" Content="Only apply this choice now and ask again the next time" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsServiceRuleChecked, ElementName=NotifWindow}" Grid.Row="1" Grid.Column="1" Content="{Binding CurrentService, FallbackValue='Service: N/A'}" ContentStringFormat="Service: {0}" />
                                    <CheckBox IsChecked="{Binding OptionsView.IsTargetIPChecked, ElementName=NotifWindow}" Grid.Row="2" Grid.Column="1" Content="{Binding Target, FallbackValue='Target: N/A'}" ContentStringFormat="Target: {0}" />
                                </Grid>
                            </Expander>
                        </StackPanel>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </Grid>
    </DockPanel>
</Window>
